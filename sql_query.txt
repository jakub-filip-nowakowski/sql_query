SHOW databases;
USE najszybsze_zwierzeta;
SHOW tables;
DESC najwolniejsze_zwierzeta;
CREATE TABLE najszybsze
(
	zwierze CHAR(20) NOT NULL,
    max_predkosc INT,
    stan CHAR(10)
);
DESC najszybsze;
INSERT INTO unikaty_najszybsze(zwierze_id, zwierze, max_predkosc, stan) 
VALUES (1,'Sokol Wedrowny', 390, 'nurkowanie');

INSERT INTO unikaty_najszybsze(zwierze_id, zwierze, max_predkosc) 
VALUES (10, 'Orzel Zloty', 320);

INSERT INTO najszybsze(max_predkosc, stan) 
VALUES (170, 'lot');

SELECT * FROM najszybsze;
DROP TABLE najszybsze;
/* =============================================================================== */
CREATE TABLE najszybsze
(
	zwierze CHAR(20) NOT NULL DEFAULT 'nienazwane',
    max_predkosc INT,
    stan CHAR(10) NOT NULL DEFAULT 'niepodano'
);
DESC najszybsze;
SELECT * FROM najszybsze;
CREATE TABLE unikaty_najszybsze
(
	zwierze_id INT NOT NULL,
    zwierze CHAR(20) DEFAULT 'nienazwane',
    max_predkosc INT NOT NULL, 
    stan CHAR (10) DEFAULT 'nie podano',
PRIMARY KEY(zwierze_id)
);
DESC unikaty_najszybsze;
SELECT * FROM unikaty_najszybsze;
DROP TABLE unikaty_najszybsze;
CREATE TABLE unikaty_najszybsze
(
	zwierze_id INT AUTO_INCREMENT PRIMARY KEY,
    zwierze CHAR(20) DEFAULT 'nienazwane',
    max_predkosc INT NOT NULL, 
    stan CHAR (10) DEFAULT 'nie podano'
);

INSERT INTO unikaty_najszybsze(zwierze, max_predkosc, stan) 
VALUES ('Sokol Wedrowny', 390, 'nurkowanie');

INSERT INTO unikaty_najszybsze(zwierze, max_predkosc) 
VALUES ('Orzel Zloty', 320);

SELECT * FROM unikaty_najszybsze;

INSERT INTO unikaty_najszybsze(zwierze_id, zwierze, max_predkosc) 
VALUES (173, 'Kobuz', 160);

INSERT INTO unikaty_najszybsze(zwierze, max_predkosc) 
VALUES ('Gepard', 160);
/* ========================================================================= */
USE sakila;
DESC sakila;
SHOW TABLES;
SELECT * FROM film;
DESC film;
SELECT title, release_year FROM film;
SELECT title, length FROM film LIMIT 151;
SELECT length, title FROM film LIMIT 150, 20;
SELECT title, rating  FROM film WHERE rating = 'G';
SELECT title, length FROM film WHERE length > 120;
SELECT title, length FROM film WHERE length != 130;
SELECT title, rating FROM film LIMIT 50;
SELECT title FROM film LIMIT 980, 20;
SELECT 
	title AS 'Tytu³ filmu', 
	release_year AS 'Rok wydania',
	length AS 'D³ugoœæ filmu', 
	rental_duration AS 'Czas wypo¿yczenia', 
	rental_rate AS 'Koszt wypo¿yczenia', 
	replacement_cost AS 'Koszt odkupu' 
FROM film 
LIMIT 20;


SELECT database();

DESC customer;
SELECT 
	first_name AS 'Imiê',
    last_name AS 'Nazwisko',
    email AS 'Adres email',
    create_date AS 'Data rejestracji'
FROM customer 
LIMIT 99, 15;

USE sakila;
CREATE TABLE fastest
(
    animal CHAR(30),
    max_speed INT,
    class CHAR(20)
);
INSERT INTO fastest(animal, max_speed, class)
VALUES
    ("Peregrine falcon", 390, "Flight-diving"),
    ("Golden eagle", 320, "Flight-diving"),
    ("Whitethroated needletail swift", 170, "Flight");
    
SELECT * FROM fastest;

SELECT * FROM customer LIMIT 10;
UPDATE customer SET email = 'mary.smith@gmail.com' WHERE customer_id = 1;
UPDATE customer SET last_name = "KONONOWICZ" WHERE customer_id = 7;

SHOW databases;
SHOW tables;
USE sakila;

SELECT database();
USE najszybsze_zwierzeta;
CREATE TABLE fastest
(
    animal CHAR(30),
    max_speed INT,
    class CHAR(20)
);
INSERT INTO fastest(animal, max_speed, class)
VALUES
    ("Peregrine falcon", 390, "Flight-diving"),
    ("Golden eagle", 320, "Flight-diving"),
    ("Whitethroated needletail swift", 170, "Flight"),
    ('Eurasian hobby', 160, 'Flight'),
    ('Mexican free-tailed bat', 160, 'Flight'),
    ('Frigatebird', 153, 'Flight'),
    ('Rock dove', 149, 'Flight'),
    ('Spur-winged goose', 142, 'Flight'),
    ('Black marlin', 129, 'Swimming'),
    ('Gryfalcon', 128, 'Flight');

SELECT * FROM fastest;
DELETE FROM fastest WHERE animal = 'Rock dove';
DELETE FROM fastest WHERE class = 'Flight-diving';

USE sakila;
SELECT * FROM customer LIMIT 40;
UPDATE customer SET email = 'Lopez.A@yahoo.com' WHERE customer_id = 32;
DELETE FROM customer WHERE customer_id = 33;
/* =============================================================================== */
CREATE TABLE fastest_file
(
	zwierze CHAR(30),
    predkosc INT,
    klasa CHAR(20)
);

SHOW VARIABLES LIKE 'secure_file_priv';

LOAD DATA INFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Uploads\\fastest_file.csv'
INTO TABLE fastest_file
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\r\n';

SELECT * FROM fastest_file;

CREATE TABLE fastest_file2
(
	zwierze CHAR(30),
    predkosc DEC(4,1),
    klasa CHAR(20)
);

LOAD DATA INFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Uploads\\fastest_utf8.csv'
INTO TABLE fastest_file2
CHARACTER SET utf8
FIELDS TERMINATED BY ';'
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 LINES
(zwierze, @predkosc, @klasa)
SET predkosc = REPLACE (@predkosc, ',', '.'),
	klasa = IF(@klasa = '', NULL, @klasa);
SELECT * FROM fastest_file2;
/* =============================================================================== */
SHOW databases;
CREATE DATABASE ksiazki;
SELECT database();
CREATE TABLE ksiazki 
(
	ksiazka_id INT AUTO_INCREMENT PRIMARY KEY,
	author CHAR(50),
	title CHAR(150),
	publication_year INT,
	ISBN CHAR(13),
    rating DEC(3,2),
	ratings_no INT,
	reviews_no INT,
	1_star INT,
	2_star INT,
	3_star INT,
	4_star INT,
	5_star INT
);
USE ksiazki;
DROP TABLE ksiazki1;
SHOW TABLES;
DESC ksiazki1;

LOAD DATA INFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Uploads\\ksiazki.csv'
INTO TABLE ksiazki
CHARACTER SET utf8
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\r\n'
IGNORE 1 LINES
(author, title, publication_year, ISBN, @rating, ratings_no, reviews_no, 1_star, 2_star, 3_star, 4_star, 5_star)
SET rating = REPLACE(@rating, ',', '.'); 
SELECT * FROM ksiazki1;
/* =============================================================================== */
SELECT author, title FROM ksiazki1
INTO OUTFILE 'pliktest.csv'
CHARACTER SET utf8
FIELDS TERMINATED BY ';'
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n';
/* =============================================================================== */
SELECT title, publication_year FROM ksiazki1
INTO OUTFILE 'C:\\pliktest2.csv'
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\r\n';
/* =============================================================================== */
SELECT concat(author,title) FROM ksiazki1 LIMIT 5;
SELECT concat(author, '-', title, '-', publication_year) FROM ksiazki1 LIMIT 5;
SELECT 
	concat_ws(' - ', author, title, publication_year) AS 'author - tytu³ - rok wydania'
FROM ksiazki1 
LIMIT 5;
/* =============================================================================== */
SELECT substring('mam na imiê Jakub', 12,6);
SELECT substring('mam na imiê Jakub', 12);
SELECT substring('mam na imiê Jakub', -5);

SELECT substring(title, 1, 12) FROM ksiazki1;

SELECT concat
(
	substring(title, 1, 7),
	'...'
)
FROM ksiazki1;

SELECT concat
(
	substring(author, 1, 5),
    '...',
    ' - ',
    substring(title, 1, 10),
    '...'
) 
FROM ksiazki1;
/* ============================================================================== */
SELECT REPLACE('My SQL jest super!', 'super', 'ekstra');

SELECT 
substring(
	REPLACE(title, 'e', '3'),
    1, 10
)
FROM ksiazki1;

SELECT 	
REPLACE( 
	REPLACE(
		REPLACE(
			REPLACE(
				REPLACE(title,	'e', '3'),
								'a', '4'),
								't', '7'),
								'b', '8'),
								's', '5')
FROM ksiazki1 LIMIT 15;
/* =============================================================================== */
USE ksiazki;
SELECT REVERSE(author) FROM ksiazki1;

SELECT char_length('Jakub Nowakowski z Sosnowca');
SELECT title, CHAR_LENGTH(title) AS 'D³ugoœæ tytu³u' FROM ksiazki1;
SELECT UPPER('jakub nowakowski');
SELECT LOWER('JAKUB NOWAKOWSKI');

SELECT author FROM ksiazki1;
SELECT 
	SUBSTRING_INDEX(author, ' ', 1) AS first_name,
    SUBSTRING_INDEX(author, ' ', -1) AS last_name
FROM ksiazki1;

SELECT DISTINCT publication_year FROM ksiazki1;
/*=================================================================================*/
SELECT 
DISTINCT LOWER(
		SUBSTRING_INDEX(author, ' ', 1)
	)
AS imiê,
CHAR_LENGTH(SUBSTRING_INDEX(author, ' ', 1)) AS 'D³ugoœæ imienia'
FROM ksiazki1;
/*================================================================================ */
SELECT 
	title AS tytu³,
    rating
FROM ksiazki1
ORDER BY rating DESC
LIMIT 10;

SELECT 
	author AS autor,
    title AS tytu³,
    publication_year AS 'rok wydania',
    isbn
FROM ksiazki1
ORDER BY 4 DESC
LIMIT 10;

DESC ksiazki1;

SELECT 
	title AS tytu³,
    SUBSTRING_INDEX(author, ' ', -1) AS nazwisko,
    ratings_no AS 'iloœæ ocen'
FROM ksiazki1
ORDER BY 3 DESC
LIMIT 15;
 
SELECT * FROM ksiazki1 WHERE author LIKE 'Jo%';
SELECT * FROM ksiazki1 WHERE author LIKE '%Tolkien';
SELECT * FROM ksiazki1 WHERE author LIKE '%Tolk%';

SELECT SUBSTRING_INDEX(author, ' ', 1) FROM ksiazki1 
WHERE SUBSTRING_INDEX(author, ' ', 1) 
LIKE '____';

SELECT * FROM ksiazki1 WHERE title LIKE '%/%%';

SELECT title FROM ksiazki1 WHERE title LIKE '%the%';

SELECT SUBSTRING_INDEX(author, ' ', -1) FROM ksiazki1 
WHERE CHAR_LENGTH(SUBSTRING_INDEX(author, ' ', -1)) = 6;
/*================================================================================ */
USE ksiazki;
SELECT COUNT(*) FROM ksiazki1;
SELECT COUNT(DISTINCT author) FROM ksiazki1;
SELECT COUNT(*) FROM ksiazki1 WHERE title LIKE '%the%';
SELECT 
	COUNT(DISTINCT SUBSTRING_INDEX(author, ' ', -1)) 
    FROM ksiazki1 
    WHERE CHAR_LENGTH(SUBSTRING_INDEX(author, ' ', -1)) = 6;

SELECT COUNT(*)
FROM ksiazki1
WHERE publication_year = 2012;

SELECT COUNT(*)
FROM ksiazki1
WHERE SUBSTRING_INDEX(author, ' ', 1) = 'John';

SELECT 
	author,
    COUNT(*) AS 'ile ksiazek'
FROM ksiazki1
GROUP BY author;

SELECT 
	publication_year,
    COUNT(*) AS 'ksiazki w danym roku'
FROM ksiazki1
GROUP BY publication_year
ORDER BY 2 DESC;
/* ========================================================================= */
USE ksiazki;
SELECT MIN(rating) FROM ksiazki1;
SELECT rating FROM ksiazki1 ORDER BY rating LIMIT 1;
SELECT MAX(rating) FROM ksiazki1;

SELECT author, title, rating 
FROM ksiazki1 ORDER BY rating LIMIT 1; 

SELECT author, title, rating 
FROM ksiazki1 
WHERE rating = (SELECT MIN(rating) FROM ksiazki1);

SELECT SUM(ratings_no) FROM ksiazki1;
SELECT 
	author, 
    SUM(ratings_no), 
    COUNT(*) 
FROM ksiazki1 
GROUP BY author 
ORDER BY SUM(ratings_no) DESC;

SELECT AVG(ratings_no) FROM ksiazki1;
SELECT 
	publication_year, 
    AVG(rating) 
FROM ksiazki1 
GROUP BY publication_year 
ORDER BY publication_year DESC;

SELECT ROUND(4.202137, 2);

SELECT 
	publication_year, 
    ROUND(AVG(rating), 2) 
FROM ksiazki1 
GROUP BY publication_year 
ORDER BY publication_year DESC;

SELECT 13 % 2;
SELECT 13 % 5;
SELECT 13 % 7;

SELECT 
	author, MIN(publication_year)
FROM ksiazki1
GROUP BY author;

SELECT * FROM ksiazki1 LIMIT 5;

SELECT 
	author, SUM(reviews_no) AS komentarzy
FROM ksiazki1
GROUP BY author 
ORDER BY komentarzy DESC
LIMIT 10;

USE ksiazki;
SELECT * FROM ksiazki1 LIMIT 5;

SELECT 
	author, 
	ROUND(AVG(1_star), 0),
	ROUND(AVG(5_star), 0)
FROM ksiazki1
GROUP BY author
ORDER BY SUBSTRING_INDEX(author, ' ', -1);
/* =============================    DATE    ===========================================*/
SELECT CURDATE();
SELECT CURTIME();
SELECT NOW();
SELECT DAY(NOW());
SELECT DAY ('2017-0-19');
SELECT DAYNAME(NOW());
SELECT DAYOFWEEK(NOW());
SELECT DAYOFYEAR(NOW());
SELECT MONTH(NOW());
SELECT MONTHNAME(NOW());
SELECT HOUR(NOW());
SELECT MINUTE(NOW());
SELECT SECOND(NOW());

SELECT DATE_FORMAT('2021-09-18 21:37:13', '%d/%m/%y');
SELECT DATE_FORMAT('2021-09-18 21:37:13', '%M/%D/%Y , %H:%i');

SELECT DATEDIFF(NOW(), '2010-01-01');
SELECT DATE_ADD(NOW(), INTERVAL 100 DAY);
SELECT DATE_ADD(NOW(), INTERVAL 21 YEAR);
SELECT DATE_ADD(NOW(), INTERVAL 100 MINUTE);

SELECT DATE_SUB(NOW(), INTERVAL 100 DAY);
SELECT DATE_SUB(NOW(), INTERVAL 21 YEAR);
SELECT DATE_SUB(NOW(), INTERVAL 100 MINUTE);

SELECT TIMESTAMP('2010-05-01');
CREATE TABLE komentarze
(
	tresc VARCHAR(250),
    data_wpisu TIMESTAMP DEFAULT NOW()
);
INSERT INTO komentarze(tresc) VALUES ('ta ksiazka jest super');
INSERT INTO komentarze(tresc) VALUES ('podoba³o mi siê!');

UPDATE komentarze SET tresc = 'no mo¿e nie za bardzo fajna' 
WHERE tresc = 'ta ksiazka jest super';

SELECT * FROM komentarze;

CREATE TABLE komentarze2
(
	tresc VARCHAR(250),
    data_wpisu TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP
);
INSERT INTO komentarze2(tresc) VALUES ('ta ksiazka jest super');
INSERT INTO komentarze2(tresc) VALUES ('podoba³o mi siê!');

UPDATE komentarze2 SET tresc = 'no mo¿e nie za bardzo fajna' 
WHERE tresc = 'ta ksiazka jest super';
SELECT * FROM komentarze2;
/* ============================= OPERATORY LOGICZNE==============================*/
SELECT 5 = 5;
SELECT 5 != 5;
SELECT 6 = 5;
SELECT 6 != 5;

SELECT 8 > 5;
SELECT 8 < 5;
SELECT 8 >= 5;
SELECT 8 <= 5;

SELECT title, publication_year FROM ksiazki1 WHERE publication_year >= 2000;
SELECT title, publication_year FROM ksiazki1 WHERE publication_year != 2000;

SELECT
	title, publication_year, rating
FROM ksiazki1
WHERE publication_year > 2010 AND rating > 4.0;

SELECT
	title, publication_year, rating
FROM ksiazki1
WHERE publication_year > 2010 OR rating > 4.0;

SELECT title, publication_year
FROM ksiazki1
WHERE 
	publication_year < 2010 AND
	publication_year > 2000;
    
SELECT title, publication_year
FROM ksiazki1
WHERE 
	publication_year BETWEEN 2000 AND 2010;
    
SELECT title, publication_year
FROM ksiazki1
WHERE 
	publication_year NOT BETWEEN 2000 AND 2010;

SELECT title, publication_year
FROM ksiazki1
WHERE publication_year BETWEEN 2005 AND 2010;

SELECT publication_year, AVG(rating)
FROM ksiazki1
WHERE publication_year BETWEEN 1990 AND 2005
GROUP BY publication_year						 	/* lub 1 */
ORDER BY publication_year ASC; 						/* lub 1 */

SELECT * FROM ksiazki1 LIMIT 5;

SELECT author, SUM(1_star)
FROM ksiazki1
WHERE 
	ratings_no >= 1000000 OR 
    reviews_no >= 50000
GROUP BY 1;

SELECT 10 / 5;
/* Jaki procent wœród ksi¹¿ek o ocenie co najmniej 4, stanowi¹ oceny piêciogwiazdkowe? */ 
SELECT 
    sum(5_star) / sum(ratings_no) * 100 AS procent 
FROM ksiazki1 
WHERE rating > 4;

/* Jaka jest œrednia ocena dla autorów których nazwiska s¹ krótsze ni¿ 6 albo d³u¿sze ni¿ 10 znaków? */
SELECT AVG(rating)
FROM ksiazki1
WHERE 	CHAR_LENGTH(SUBSTRING_INDEX(author, ' ', -1)) < 6 OR 
		CHAR_LENGTH(SUBSTRING_INDEX(author, ' ', -1)) > 10;

SELECT 
    AVG(rating) 
FROM ksiazki1
WHERE char_length(SUBSTRING_INDEX(author, ' ', -1)) NOT BETWEEN 6 AND 10;

/* Dla ka¿dego autora, dla ka¿dego roku w którym opublikowa³ ksi¹¿kê (lub ksi¹¿ki) policz sumê komentarzy do tych pozycji, 
uwzglêdnij tylko pozycje, które mia³y co najmniej 600 tys. g³osów, listê podaj posortowan¹ od Z do A. 

[PodpowiedŸ: nale¿y zastosowaæ podwójne grupowanie - nie omawialiœmy tego tematu ale rozwi¹zanie jest prostsze ni¿ Ci siê wydaje – tylko pamiêtaj o kolejnoœci!] */
SELECT * FROM ksiazki1 LIMIT 5 ;

SELECT author, publication_year, SUM(reviews_no)
FROM ksiazki1
WHERE ratings_no > 600000
GROUP BY author, publication_year
ORDER BY author ASC;
/* Podaj listê autorów i tytu³ów ksi¹¿ek wydanych w latach parzystych. */
SELECT author, title, publication_year
FROM ksiazki1
WHERE publication_year % 2 = 0;


/* Bêdê z Tob¹ szczery… sporz¹dzaj¹c bazê ocen i liczby g³osów na 1 do 5 gwiazdek œwiadomie wprowadzi³em do bazy kilka b³êdów. 
Dla paru ksi¹¿ek suma oddanych na nie g³osów oraz suma g³osów na poszczególn¹ liczbê gwiazdek siê nie zgadza. W tym æwiczeniu chcia³bym uzyskaæ dwie rzeczy:

po pierwsze zidentyfikuj tytu³y ksi¹¿ek o których jest mowa,

po drugie, napisz formu³ê, która sprawdzi powy¿szy warunek i dla ka¿dej pozycji, dla której suma g³osów (ratings_no) jest inna ni¿ suma g³osów na poszczególn¹ iloœæ gwiazdek, 
zaktualizuje ten atrybut do liczby bêd¹cej prawid³ow¹ sum¹. */

SELECT 
	author, 
	title, 
    ratings_no, 
    1_star + 2_star + 3_star + 4_star + 5_star AS 'suma gwiazdek'
FROM ksiazki1
WHERE ratings_no != 1_star + 2_star + 3_star + 4_star + 5_star;

UPDATE ksiazki1
SET ratings_no = (1_star + 2_star + 3_star + 4_star + 5_star) 
WHERE ratings_no != (1_star + 2_star + 3_star + 4_star + 5_star);
/* ========================= TRANSFORMACJA I ZAWIERANIE SIÊ   ==============================*/
SELECT CAST('2010-05-01' AS DATE);
SELECT CAST(10 AS CHAR);

SELECT 
	SUBSTRING_INDEX(author, ' ', 1) AS "first_name",
	SUBSTRING_INDEX(author, ' ', -1) AS "last_name",
    title,
    publication_year
FROM ksiazki1
WHERE SUBSTRING_INDEX(author, ' ', -1) IN ("tolkien", "rowling", "king");

/* Podaj œredni¹ ocenê ksi¹¿ek ka¿dego autora który ma na imiê John, Dan, George lub William, 
uwzglêdnij tylko ksi¹¿ki publikowane w latach nieparzystych.  */

SELECT author, AVG(rating)
FROM ksiazki1
WHERE SUBSTRING_INDEX(author, ' ', 1) IN ('John', 'Dan', 'George', 'William') AND
publication_year % 2 = 0
GROUP BY author;

SELECT title, rating,
	CASE
		WHEN rating > 4 THEN 'To jest dobra ksiazka'
        ELSE 'To jest przecietna ksiazka'
	END AS rodzaj
FROM ksiazki1;

SELECT title, rating,
	CASE
		WHEN rating > 4.2 THEN 'Doskonala ksiazka'
        WHEN rating BETWEEN 3.8 AND 4.2 THEN 'Dobra ksizka'
        ELSE 'Przecietna ksiazka'
	END AS rodzaj,
    author
FROM ksiazki1;

SELECT 
	title, 
    rating,
    IF(rating > 4, 'dobra ksiazka', 'przecietna ksiazka') AS rodzaj,
    author
FROM ksiazki1;

/* ================================================================================= */
/*Zastosuj formatowanie warunkowe aby przypisaæ liczbê gwiazdek 
ksi¹¿ce wed³ug jej oceny. Zastosuj nastêpuj¹ce kryteria:

***** dla oceny > 4.5
****’ dla oceny > 4.0 oraz <= 4.5
**** dla oceny > 3.5 oraz <= 4.0
***’ dla oceny > 3.0 oraz <= 3.5
*** dla oceny > 2.5 oraz <= 3.0
**’ dla oceny > 2.0 oraz < 2.5
* dla pozosta³ych przypadków */

SELECT 
	author, 
    title, 
    rating,
		CASE
			WHEN rating > 4.5 THEN '*****'
			WHEN rating > 4.0 AND rating <= 4.5 THEN '****\''
			WHEN rating > 3.5 AND rating <= 4.0 THEN '****'
			WHEN rating > 3.0 AND rating <= 3.5 THEN '***\''
			WHEN rating > 2.5 AND rating <= 3.0 THEN '***'
			WHEN rating > 2.0 AND rating <= 2.5 THEN '**\''
			else '*'
		END AS 'ilosc_gwiazdek',
    publication_year,
		CASE 
			WHEN publication_year > 1939 THEN "literatura wspolczesna"
			WHEN publication_year > 1918 AND publication_year <= 1939 THEN "literatura miedzywojenna"
			WHEN publication_year > 1880 AND publication_year <= 1918 THEN "modernizm"
			WHEN publication_year > 1850 AND publication_year <= 1880 THEN "pozytywizm"
			WHEN publication_year > 1789 AND publication_year <= 1850 THEN "romantyzm"
			WHEN publication_year > 1680 AND publication_year <= 1789 THEN "oswiecenie"
			WHEN publication_year > 1520 AND publication_year <= 1680 THEN "barok"
			WHEN publication_year > 1492 AND publication_year <= 1520 THEN "renesans"
			WHEN publication_year < 1520 THEN "sredniowiecze"
		END AS "epoka_literatury",
	IF (1_star + 2_star + 3_star + 4_star > 5_star, 
		'zazwyczaj mniej niz 5 gwiazek',
        'zazwyczaj wiecej niz 4 gwiazdki'
	) AS 'trend gwiazdek'
FROM ksiazki1
GROUP BY title;
/* ====================================================================================== */
CREATE DATABASE ksiazki;
SHOW databases;
USE ksiazki;
SHOW TABLES;
CREATE TABLE uzytkownicy
(
	user_id INT AUTO_INCREMENT PRIMARY KEY,
    imie VARCHAR(20) NOT NULL,
    nazwisko VARCHAR(50) NOT NULL,
    email VARCHAR(255) NOT NULL,
    adres_ulica VARCHAR(255) NOT NULL,
    adres_miasto VARCHAR(255) NOT NULL,
    adres_kod VARCHAR(6) NOT NULL,
    telefon INT(9) NOT NULL,
    data_rejestracji TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP
);

SHOW VARIABLES LIKE 'secure_file_priv';

LOAD DATA INFILE 
'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Uploads\\uzytkownicy.csv'
INTO TABLE uzytkownicy
CHARACTER SET utf8
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\r\n'
IGNORE 1 LINES
(imie, nazwisko, email, adres_ulica, adres_miasto, adres_kod, telefon);

SELECT * FROM uzytkownicy;
SHOW TABLES;
DESC ksiazki1;
DESC uzytkownicy;

CREATE TABLE zamowienia
(
	id INT AUTO_INCREMENT PRIMARY KEY,
    uzytkownicy_id INT,
    data_zamowienia TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (uzytkownicy_id) REFERENCES uzytkownicy(user_id)
);

CREATE TABLE koszyk
(
	zamowienia_id INT, 
    ksiazki_id INT, 
    FOREIGN KEY (zamowienia_id) REFERENCES zamowienia(id),
    FOREIGN KEY (ksiazki_id) REFERENCES ksiazki(ksiazka_id)
);

DROP TABLE zamowienia; 
DROP TABLE koszyk;

LOAD DATA INFILE 
'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Uploads\\zamowienia.csv'
INTO TABLE zamowienia
CHARACTER SET utf8
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\r\n'
IGNORE 1 LINES
(id, uzytkownicy_id);

LOAD DATA INFILE 
'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Uploads\\koszyk.csv'
INTO TABLE koszyk
CHARACTER SET utf8
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\r\n'
IGNORE 1 LINES
(zamowienia_id, ksiazki_id);

SELECT * FROM koszyk;
SELECT * FROM zamowienia;
SELECT * FROM uzytkownicy;
SELECT * FROM ksiazki;

SELECT * FROM zamowienia, uzytkownicy WHERE uzytkownicy_id = uzytkownicy.user_id;
SELECT * FROM zamowienia, koszyk WHERE zamowienia_id = zamowienia.id 
AND uzytkownicy_id = 1;

/* Przy pomocy jednego zapytania wypisz numery zamówieñ i iloœæ ksi¹¿ek
 jakie zosta³y w ramach ka¿dego zamówienia kupione. */
 
 SELECT zamowienia.id, COUNT(koszyk.ksiazki_id) AS 'ilosc ksiazek'  
 FROM zamowienia, koszyk
 WHERE id = koszyk.zamowienia_id
 GROUP BY zamowienia.id;
 
 SELECT
    zamowienia_id,
    COUNT(*) AS ile_ksiazek
FROM koszyk, ksiazki
WHERE ksiazki_id = ksiazki.ksiazka_id
GROUP BY zamowienia_id;

USE ksiazki;
    
CREATE TABLE autor
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    imie CHAR(20),
    nazwisko CHAR(20)
);

CREATE TABLE ksiazka
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    tytul CHAR(20),
    rok_wydania INT(4),
    autor_id INT,
    FOREIGN KEY(autor_id) REFERENCES autor(id)
);

INSERT INTO autor(imie, nazwisko)
VALUES
    ("George", "Orwell"),
    ("Bram", "Stoker"),
    ("Frank", "Herbert"),
    ("Stephen", "King") ,
    ("Charles", "Dickens");
    
INSERT INTO ksiazka(tytul, rok_wydania, autor_id)
VALUES
    ("Animal Farm", 1945, 1),
    ("Dune", 1965, 3),
    ("Dracula", 1897, 2),
    ("The Stand", 1990, 4),
    ("1984", 1949, 1),
    ("The Shining", 1977, 4);
    
SELECT * FROM autor;
SELECT * FROM ksiazka;

/* ============================= JOINS ================================= */

USE ksiazki;

SELECT * FROM autor LEFT JOIN ksiazka ON autor.id = ksiazka.autor_id;
SELECT * FROM autor RIGHT JOIN ksiazka ON autor.id = ksiazka.autor_id;

SELECT * FROM autor LEFT JOIN ksiazka ON autor.id = ksiazka.autor_id
WHERE ksiazka.autor_id IS NULL; /* exclusive left join */

SELECT * FROM autor RIGHT JOIN ksiazka ON autor.id = ksiazka.autor_id
WHERE autor.id IS NULL; /* exclusive right join */

SELECT * FROM autor INNER JOIN ksiazka ON autor.id = ksiazka.autor_id;
/* mozna napisac zwyczajnie join bo domyslny typ to INNER */

SELECT * FROM autor, ksiazka;
SELECT * FROM autor CROSS JOIN ksiazka;
/* to jest to samo, przemnozenie rekordow przez siebie */

SELECT * FROM autor LEFT JOIN ksiazka ON autor.id = ksiazka.autor_id
UNION
SELECT * FROM autor RIGHT JOIN ksiazka ON autor.id = ksiazka.autor_id
WHERE autor.id IS NULL;

/* USUWANIE WPISÓW Z TABEL Z REFERENCJ¥ */

DROP TABLE ksiazka;
DROP TABLE autor;

CREATE TABLE autor
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    imie CHAR(20),
    nazwisko CHAR(20)
);

CREATE TABLE ksiazka
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    tytul CHAR(20),
    rok_wydania INT(4),
    autor_id INT,
    FOREIGN KEY(autor_id) 
		REFERENCES autor(id)
        ON DELETE CASCADE
);

INSERT INTO autor(imie, nazwisko)
VALUES
    ("George", "Orwell"),
    ("Bram", "Stoker"),
    ("Frank", "Herbert"),
    ("Stephen", "King") ,
    ("Charles", "Dickens");
    
INSERT INTO ksiazka(tytul, rok_wydania, autor_id)
VALUES
    ("Animal Farm", 1945, 1),
    ("Dune", 1965, 3),
    ("Dracula", 1897, 2),
    ("The Stand", 1990, 4),
    ("1984", 1949, 1),
    ("The Shining", 1977, 4);
    
SELECT * FROM autor;
SELECT * FROM ksiazka;

DELETE FROM autor WHERE nazwisko = 'Orwell';
SELECT * FROM zamowienia;
SELECT * FROM uzytkownicy;

SELECT * FROM zamowienia, uzytkownicy
WHERE uzytkownicy_id = uzytkownicy.user_id;
SELECT * FROM zamowienia
LEFT JOIN uzytkownicy
ON zamowienia.uzytkownicy_id = uzytkownicy.user_id;
/* to jest to samo */

SELECT 
zamowienia.id,
uzytkownicy.adres_ulica,
uzytkownicy.adres_miasto,
uzytkownicy.adres_kod
FROM zamowienia
LEFT JOIN uzytkownicy
ON zamowienia.uzytkownicy_id = uzytkownicy.user_id;

SELECT * FROM zamowienia
JOIN uzytkownicy
ON zamowienia.uzytkownicy_id = uzytkownicy.user_id
WHERE uzytkownicy_id = 1;

SELECT * FROM zamowienia, koszyk
WHERE koszyk.zamowienia_id = zamowienia.id
AND uzytkownicy_id = 1;
/* ====================================== ÆWICZENIA ==================================================*/
USE ksiazki;
SHOW tables;
DESC ksiazki;
DESC koszyk;
/* Wylistuj numery zamówien i zamówione ksi¹¿ki (po³¹cz u¿ywaj¹c kostrukcji JOIN tabele: koszyk i ksi¹¿ki). */
SELECT * FROM ksiazki, koszyk
WHERE ksiazki.ksiazka_id = koszyk.ksiazki_id;

/* ZnajdŸ numery zamówieñ, w których zakupiono ksi¹¿kê o Harrym Potterze. */
SELECT * FROM koszyk JOIN ksiazki
ON koszyk.ksiazki_id = ksiazki.ksiazka_id
WHERE ksiazki.title LIKE "%Harry Potter%";

/* Wypisz adresy email u¿ytkowników, którzy nie z³o¿yli jeszcze zamówienia w naszym sklepie aby wys³aæ im kupon promocyjny na pierwsze zakupy. */

SELECT uzytkownicy.email FROM uzytkownicy LEFT JOIN zamowienia
ON uzytkownicy.user_id = zamowienia.uzytkownicy_id
WHERE zamowienia.uzytkownicy_id IS NULL;


/* Wylistuj wszystkich u¿ytkowników z Warszawy i powi¹¿ ich z ich zamówieniami. */

SELECT * FROM uzytkownicy
LEFT JOIN zamowienia ON uzytkownicy.user_id = zamowienia.uzytkownicy_id
WHERE uzytkownicy.adres_miasto = "Warszawa";

SELECT * FROM zamowienia 
RIGHT JOIN uzytkownicy ON uzytkownicy.user_id = zamowienia.uzytkownicy_id 
WHERE uzytkownicy.adres_miasto LIKE "Warszawa";

/* ======================= WIELOKROTNE £¥CZENIE TABEL ============== */
SELECT * FROM zamowienia;
SELECT * FROM uzytkownicy;
SELECT * FROM koszyk;
SELECT * FROM ksiazki;


SELECT * FROM zamowienia
JOIN koszyk
ON koszyk.zamowienia_id = zamowienia.id
JOIN ksiazki
ON koszyk.ksiazki_id = ksiazki.ksiazka_id;

SELECT
	uzytkownicy.imie,
    uzytkownicy.nazwisko,
    ksiazki.title
FROM uzytkownicy
	JOIN zamowienia ON zamowienia.uzytkownicy_id = uzytkownicy.user_id
    JOIN koszyk ON koszyk.zamowienia_id = zamowienia.id
    JOIN ksiazki ON ksiazki.ksiazka_id = koszyk.ksiazki_id;

USE ksiazki;
CREATE TABLE ksiazka
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    tytul CHAR(20),
    rok_wydania INT(4),
    autor_id INT,
    FOREIGN KEY(autor_id) 
		REFERENCES autor(id)
        ON DELETE CASCADE
);
CREATE TABLE magazyn
(
	id INT AUTO_INCREMENT PRIMARY KEY,
    ksiazki_id INT,
    stan_magazynowy INT,
    hurtownia TINYINT,
    data_aktualizacji TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP,
	FOREIGN KEY (ksiazki_id)
		REFERENCES ksiazki(ksiazka_id)
);
LOAD DATA INFILE 
'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Uploads\\magazyn.csv'
INTO TABLE magazyn
CHARACTER SET utf8
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\r\n'
IGNORE 1 LINES
(ksiazki_id, stan_magazynowy, hurtownia);

SELECT * FROM magazyn;
SELECT * FROM zamowienia;
SELECT * FROM koszyk;
SELECT * FROM ksiazki LIMIT 5;

/* Stan magazynowy ksi¹¿ek które zosta³y zakupione choæ raz. */
SELECT DISTINCT ksiazki.title, magazyn.stan_magazynowy FROM ksiazki
JOIN koszyk ON koszyk.ksiazki_id = ksiazki.ksiazka_id
JOIN magazyn ON magazyn.ksiazki_id = ksiazki.ksiazka_id
WHERE koszyk.ksiazki_id != 0;

SELECT 
    DISTINCT title, 
    magazyn.stan_magazynowy 
FROM koszyk 
JOIN ksiazki ON ksiazki.ksiazka_id = koszyk.ksiazki_id 
    LEFT JOIN magazyn ON magazyn.ksiazki_id = ksiazki.ksiazka_id;

/* Tytu³y ksi¹¿ek niedostêpnych ju¿ w hurtowni oraz ich stan magazynowy posortowane rosn¹co wed³ug iloœci sztuk na magazynie. */

SELECT ksiazki.title, magazyn.stan_magazynowy FROM ksiazki
JOIN magazyn ON magazyn.ksiazki_id = ksiazki.ksiazka_id
WHERE magazyn.hurtownia = 0 
ORDER BY magazyn.stan_magazynowy ASC;
/* tutaj musi byc uzyty left join gdyz nie wyswietla sie ksizki o stanie magazynowym zero */
SELECT 
    title, 
    magazyn.stan_magazynowy 
FROM ksiazki 
LEFT JOIN magazyn ON magazyn.ksiazki_id = ksiazki.ksiazka_id 
WHERE magazyn.hurtownia = 0 ORDER BY 2;

/* Ile jest ksi¹¿ek, które nigdy nie zosta³y zamówione */
SELECT * FROM koszyk;

SELECT COUNT(*) FROM ksiazki
LEFT JOIN koszyk ON ksiazki.ksiazka_id = koszyk.ksiazki_id
WHERE koszyk.ksiazki_id IS NULL;

/* Spoœród ksi¹¿ek, które nigdy nie zosta³y zamówione, wymieñ 5 których mamy na magazynie najwiêcej. */
SELECT ksiazki.title, magazyn.stan_magazynowy
FROM ksiazki
LEFT JOIN magazyn ON ksiazki.ksiazka_id = magazyn.ksiazki_id
LEFT JOIN koszyk ON ksiazki.ksiazka_id = koszyk.ksiazki_id
WHERE koszyk.ksiazki_id IS NULL 
ORDER BY magazyn.stan_magazynowy DESC
LIMIT 5;

SELECT * FROM ksiazki
LEFT JOIN magazyn ON magazyn.ksiazki_id = ksiazki.ksiazka_id
    LEFT JOIN koszyk ON koszyk.ksiazki_id = ksiazki.ksiazka_id 
    WHERE koszyk.ksiazki_id IS NULL
ORDER BY magazyn.stan_magazynowy DESC
LIMIT 5;

/* Posortuj tytu³y sprzedanych ksi¹¿ek wed³ug iloœci sprzedanych egzemplarzy (malej¹co), 
sprawdŸ czy pozycja jest dostêpna w hurtowni i wypisz stosown¹ informacjê (‘brak w hurtowni’ lub ‘dostêpny w hurtowni’). 
TO JEST ZADANIE KTÓRE NA CHWILÊ OBECN¥ NIECO PRZERASTA MOJE MO¯LIWOŒCI, ROZWIAZANIE JEST JEDNAK BARDZO KROTKIE I BANALNE*/
SELECT
    ksiazki.title,
    COUNT(*) AS sprzedanych,
    CASE
        WHEN magazyn.hurtownia = 0 THEN 'brak w hurtowni'
        ELSE 'dostêpny w hurtowni'
    END AS sprzedanych
FROM koszyk
LEFT JOIN ksiazki ON ksiazki.ksiazka_id = koszyk.ksiazki_id
    LEFT JOIN magazyn ON ksiazki.ksiazka_id = magazyn.ksiazki_id
GROUP BY koszyk.ksiazki_id
ORDER BY 2 DESC;

/* ========================= TRIGGERY ====================================== */
SELECT * FROM koszyk;

DELIMITER $$
CREATE TRIGGER insert_order BEFORE INSERT ON koszyk
FOR EACH ROW BEGIN
	UPDATE magazyn SET stan_magazynowy = stan_magazynowy - 1
		WHERE magazyn.ksiazki_id = NEW.ksiazki_id;
END; $$
DELIMITER ;

INSERT INTO zamowienia(uzytkownicy_id)
VALUES
	(4),
    (8);
    
INSERT INTO koszyk(zamowienia_id, ksiazki_id)
VALUES
	(12, 1),
    (12, 3),
    (13, 4);

SELECT ksiazki_id, stan_magazynowy FROM magazyn; 

SHOW TRIGGERS;
DROP TRIGGER insert_order;